id: webhookReturn2
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - allowedGroupIds: []
    - streamResponse: false
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - workflowRunId: null
    - showFailureToaster: true
    - query: |-
        const generateReturn = () => {
            const status = () => {
              try {
                return 500
              } catch {
                return 200
              }
            }
          const body = () => {
            try {
              return {"context": workflowContext,
          "query2": {"data": query2.data, "error": query2.error},
          "format_json_response": {"data": format_json_response.data, "error": format_json_response.error},
            "webhookReturn1" : {"data": webhookReturn1.data, "error": webhookReturn1.error}
        }
            } catch {
              return {'error': true, 'messsage': 'there was a problem parsing the JSON body of webhookReturn2'}
            }
          }
          return {status: status(), body: body() }
          }
          return generateReturn()
          
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - _additionalScope: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - workflowActionType: null
    - editorMode: sql
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - evalType: script
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - overrideOrgCacheForUserCache: false
    - runWhenPageLoads: false
    - transformer: |-
        // Query results are available as the `data` variable
        return formatDataAsArray(data)
    - events: []
    - queryTimeout: '10000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - workflowBlockPluginId: null
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-11-14T20:21:10.059Z
blockData:
  top: -272
  left: 2080
  uuid: 14c8e065-1dd5-4a2b-b1c4-94920d1870a2
  options:
    body: |-
      {"context": workflowContext,
        "query2": {"data": query2.data, "error": query2.error},
        "format_json_response": {"data": format_json_response.data, "error": format_json_response.error},
          "webhookReturn1" : {"data": webhookReturn1.data, "error": webhookReturn1.error}
      }
    status: '500'
  pluginId: webhookReturn2
  blockType: webhookReturn
  editorType: JavascriptQuery
  isMinimized: false
  resourceName: JavascriptQuery
  incomingPorts:
    - portId: c8e42f3f-aaee-492f-afdd-04e69d934b9b
      blockId: f3174e22-91b1-47af-b9f3-efaaa5ce2572
    - portId: c4065c9b-dfa5-4754-8495-0cea51c821d0
      blockId: e8b6e009-cfe0-4a16-9d44-aa58f409bfa0
    - portId: 51749231-39ff-44e1-96b3-be227fa0dd9e
      blockId: 327e506d-40e3-4863-a79e-1a52bf534e67
  retryPanelOpen: false
  failureCondition: 'true'
  responsePanelState: open
  incomingOnSuccessEdges: []
